{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\JEMIMAFONSECAPASSOS\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {}\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      activeChallenge: activeChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/JEMIMAFONSECAPASSOS/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC9CJ,QAAQ,CAAC,CAAD,CADsC;AAAA,MACjEK,KADiE;AAAA,MAC1DC,QAD0D;;AAAA,mBAEtBN,QAAQ,CAAC,CAAD,CAFc;AAAA,MAEjEO,iBAFiE;AAAA,MAE9CC,oBAF8C;;AAAA,mBAGlBR,QAAQ,CAAC,CAAD,CAHU;AAAA,MAGjES,mBAHiE;AAAA,MAG5CC,sBAH4C;;AAAA,mBAK1BV,QAAQ,CAAC,IAAD,CALkB;AAAA,MAKjEW,eALiE;AAAA,MAKhDC,kBALgD;;AAOxE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA6B;AAC3B,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASY,iBAAT,GAA6B,CAE5B;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCnB,MAAAA,KAAK,EAALA,KADiC;AAEjCE,MAAAA,iBAAiB,EAAjBA,iBAFiC;AAGjCE,MAAAA,mBAAmB,EAAnBA,mBAHiC;AAIjCE,MAAAA,eAAe,EAAfA,eAJiC;AAKjCE,MAAAA,qBAAqB,EAArBA,qBALiC;AAMjCG,MAAAA,OAAO,EAAPA,OANiC;AAOjCC,MAAAA,iBAAiB,EAAjBA,iBAPiC;AAQjCM,MAAAA,cAAc,EAAdA;AARiC,KAAnC;AAAA,cAWInB;AAXJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA5CeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react'\r\n\r\nimport challenges from '../../challenges.json'\r\n\r\ninterface Challenge {\r\n  type: 'body' | 'eye';\r\n  description: string;\r\n  amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  level: number; \r\n  currentExperience: number \r\n  challengesCompleted: number;\r\n  experienceToNextLevel:number;\r\n  activeChallenge: Challenge;\r\n  levelUp: () => void;\r\n  startNewChallenge: () => void;\r\n  resetChallenge: () => void\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData)\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1)\r\n  const [currentExperience, setCurrentExperience] = useState(0)\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0)\r\n  \r\n  const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1)\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n    const challenge = challenges[randomChallengeIndex]\r\n\r\n    setActiveChallenge(challenge)\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null)\r\n  }\r\n\r\n  function completeChallenge() {\r\n    \r\n  }\r\n  \r\n  return (\r\n    <ChallengesContext.Provider value={{ \r\n      level, \r\n      currentExperience, \r\n      challengesCompleted, \r\n      activeChallenge,\r\n      experienceToNextLevel,\r\n      levelUp,\r\n      startNewChallenge,\r\n      resetChallenge\r\n      }}\r\n    >\r\n      { children }\r\n    </ChallengesContext.Provider>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}